// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <PageHeader
    isStateLoaded={false}
    isStoreLoadedFromDrive={false}
  >
    Page Title
  </PageHeader>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="page-header__title text-break"
        >
          Page Title
        </h1>,
        <div
          className="page-header__right"
        >
          <Link
            data-testid="state-status-link"
            to="/settings"
          >
            <IconSyncStatus
              className=""
              iconStyle={
                Object {
                  "color": "#fff",
                }
              }
              isLoading={true}
              isSynced={false}
              loaderColor="#fff"
              style={
                Object {
                  "padding": 0,
                }
              }
              tooltip="Loading state"
              tooltipPosition="bottom-left"
            />
          </Link>
        </div>,
      ],
      "className": "page-header container",
      "style": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Page Title",
          "className": "page-header__title text-break",
        },
        "ref": null,
        "rendered": "Page Title",
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Link
            data-testid="state-status-link"
            to="/settings"
          >
            <IconSyncStatus
              className=""
              iconStyle={
                Object {
                  "color": "#fff",
                }
              }
              isLoading={true}
              isSynced={false}
              loaderColor="#fff"
              style={
                Object {
                  "padding": 0,
                }
              }
              tooltip="Loading state"
              tooltipPosition="bottom-left"
            />
          </Link>,
          "className": "page-header__right",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <IconSyncStatus
              className=""
              iconStyle={
                Object {
                  "color": "#fff",
                }
              }
              isLoading={true}
              isSynced={false}
              loaderColor="#fff"
              style={
                Object {
                  "padding": 0,
                }
              }
              tooltip="Loading state"
              tooltipPosition="bottom-left"
            />,
            "data-testid": "state-status-link",
            "to": "/settings",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "className": "",
              "iconStyle": Object {
                "color": "#fff",
              },
              "isLoading": true,
              "isSynced": false,
              "loaderColor": "#fff",
              "style": Object {
                "padding": 0,
              },
              "tooltip": "Loading state",
              "tooltipPosition": "bottom-left",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": [Function],
        },
        "type": "div",
      },
    ],
    "type": "header",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="page-header__title text-break"
          >
            Page Title
          </h1>,
          <div
            className="page-header__right"
          >
            <Link
              data-testid="state-status-link"
              to="/settings"
            >
              <IconSyncStatus
                className=""
                iconStyle={
                  Object {
                    "color": "#fff",
                  }
                }
                isLoading={true}
                isSynced={false}
                loaderColor="#fff"
                style={
                  Object {
                    "padding": 0,
                  }
                }
                tooltip="Loading state"
                tooltipPosition="bottom-left"
              />
            </Link>
          </div>,
        ],
        "className": "page-header container",
        "style": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Page Title",
            "className": "page-header__title text-break",
          },
          "ref": null,
          "rendered": "Page Title",
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Link
              data-testid="state-status-link"
              to="/settings"
            >
              <IconSyncStatus
                className=""
                iconStyle={
                  Object {
                    "color": "#fff",
                  }
                }
                isLoading={true}
                isSynced={false}
                loaderColor="#fff"
                style={
                  Object {
                    "padding": 0,
                  }
                }
                tooltip="Loading state"
                tooltipPosition="bottom-left"
              />
            </Link>,
            "className": "page-header__right",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <IconSyncStatus
                className=""
                iconStyle={
                  Object {
                    "color": "#fff",
                  }
                }
                isLoading={true}
                isSynced={false}
                loaderColor="#fff"
                style={
                  Object {
                    "padding": 0,
                  }
                }
                tooltip="Loading state"
                tooltipPosition="bottom-left"
              />,
              "data-testid": "state-status-link",
              "to": "/settings",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "",
                "iconStyle": Object {
                  "color": "#fff",
                },
                "isLoading": true,
                "isSynced": false,
                "loaderColor": "#fff",
                "style": Object {
                  "padding": 0,
                },
                "tooltip": "Loading state",
                "tooltipPosition": "bottom-left",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          "type": "div",
        },
      ],
      "type": "header",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
